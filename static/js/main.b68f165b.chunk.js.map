{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["KitDetails","keyCode","url","name","DrumPad","props","HandleKeyPress","e","pressedKey","key","toUpperCase","PlayAudio","audioObj","document","getElementById","currentTime","play","setTimeout","console","log","addEventListener","this","myKey","keyVal","value","className","onClick","target","id","src","URL","Component","PadLine","showItem","startNum","struc","i","padName","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oOAGMA,G,MAAa,CACjB,CAAEC,QAAS,IACTC,IAAI,2DACJC,KAAK,YACP,CAAEF,QAAS,IACTC,IAAK,6DACLC,KAAK,cACP,CAAEF,QAAS,IACTC,IAAK,yDACLC,KAAM,UACR,CAAEF,QAAS,IACTC,IAAK,0DACLC,KAAM,WACR,CAAEF,QAAS,IACTC,IAAK,0DACLC,KAAM,WACR,CAAEF,QAAS,IACTC,IAAK,0DACLC,KAAM,WACR,CAAEF,QAAS,IACTC,IAAK,yDACLC,KAAM,UACR,CAAEF,QAAS,IACTC,IAAK,gEACLC,KAAM,eACR,CAAEF,QAAS,IACTC,IAAK,0DACLC,KAAM,iBAGJC,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAORC,eAAgB,SAACC,GACf,IAAIC,EAAkB,MAALD,EAAYA,EAAEE,IAAIC,cAAgBH,EACnD,EAAKI,UAAUH,IAVE,EAanBG,UAAW,SAACJ,GAEV,IAAIK,EAAWC,SAASC,eAAeP,GAC1B,MAAVK,IACDA,EAASG,YAAa,EACtBH,EAASI,OACTC,WAAWL,EAASI,OAAO,MAG7BE,QAAQC,IAAIP,IAtBK,E,gEAKjBC,SAASO,iBAAiB,UAAUC,KAAKf,kB,+BAsBjC,IAAD,OACHgB,EAAQD,KAAKhB,MAAMkB,OAEvB,OACE,4BAAQC,MAAQF,EAAOG,UAAU,WAAWC,QAAS,SAACnB,GAAD,OAAM,EAAKI,UAAUJ,EAAEoB,OAAOH,SAClFF,EACC,2BAAOG,UAAU,OAAOG,GAAIN,EAAOO,IAAKR,KAAKhB,MAAMyB,W,GAlCrCC,aAyChBC,E,kDACJ,WAAY3B,GAAQ,IAAD,8BACjB,cAAMA,IAIR4B,SAAW,WAGP,IAFF,IAAIC,EAAW,EAAK7B,MAAM6B,SACtBC,EAAM,GACCC,EAAI,EAAGA,GAAK,EAAGA,IACpBD,EAAMC,GAAG,kBAAC,EAAD,CAASb,OAAQvB,EAAWkC,EAASE,GAAGnC,QAAS6B,IAAK9B,EAAWkC,EAASE,GAAGlC,IAAKmC,QAASrC,EAAWkC,EAASE,GAAGjC,OAE/H,OAAOgC,GAXQ,E,qDAejB,OACE,yBAAKV,UAAU,YACZJ,KAAKY,gB,GAlBQF,aA2CPO,E,kDAjBf,WAAYjC,GAAQ,uCACZA,G,qDAIJ,OACE,yBAAKoB,UAAU,OACb,yBAAKA,UAAU,YAAYG,GAAG,gBAC5B,kBAAC,EAAD,CAASM,SAAU,IACnB,kBAAC,EAAD,CAASA,SAAU,IACnB,kBAAC,EAAD,CAASA,SAAU,U,GAXXH,aCvFEQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFjC,SAASC,eAAe,SDyHpB,kBAAmBiC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,a","file":"static/js/main.b68f165b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nconst KitDetails = [\n  { keyCode: 'Q',\n    url:'https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3',\n    name:'Heater 1'},\n  { keyCode: 'W',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3',\n    name:'Kick n Hat' },\n  { keyCode: 'E',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3',\n    name: 'Cev_H2' },\n  { keyCode: 'A',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_1.mp3',\n    name: 'Chord 1' },\n  { keyCode: 'S',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_2.mp3',\n    name: 'Chord 2' },\n  { keyCode: 'D',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_3.mp3',\n    name: 'Chord 3' },\n  { keyCode: 'Z',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3',\n    name: 'Bld H1' },\n  { keyCode: 'X',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/punchy_kick_1.mp3',\n    name: 'Punchy Kick' },\n  { keyCode: 'C',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Brk_Snr.mp3',\n    name: 'Break Snare' }\n]\n\nclass DrumPad extends Component {\n  constructor(props) {\n    super(props)\n  \n  }\n  componentDidMount() {\n    document.addEventListener(\"keydown\",this.HandleKeyPress)\n  }\n\n  HandleKeyPress =(e) => {\n    let pressedKey = e != null ? e.key.toUpperCase() : e\n    this.PlayAudio(pressedKey)\n  }\n\n  PlayAudio =(e) => { \n    \n    let audioObj = document.getElementById(e)\n    if(audioObj!=null) {\n      audioObj.currentTime =0;\n      audioObj.play()\n      setTimeout(audioObj.play(),100);\n    }\n    \n    console.log(audioObj)\n  }\n\n  \n  \n  render() {\n    let myKey = this.props.keyVal;\n\n    return (\n      <button value= {myKey} className=\"push-box\" onClick={(e) =>this.PlayAudio(e.target.value)}>\n      {myKey}\n        <audio className=\"clip\" id={myKey} src={this.props.URL} />\n      </button>\n    )\n  }\n}\n\n\nclass PadLine extends Component {\n  constructor(props) {\n    super(props)\n\n  }\n\n  showItem = () => {\n    let startNum = this.props.startNum\n    let struc=[]\n      for (let i = 0; i <= 2; i++) {      \n          struc[i]=<DrumPad keyVal={KitDetails[startNum+i].keyCode} URL={KitDetails[startNum+i].url} padName={KitDetails[startNum+i].name} />\n      }\n      return struc\n  }\n  render() {\n\n    return (\n      <div className=\"kit-line\">\n        {this.showItem()}\n      </div>\n    )\n  }\n\n}\n\nclass App extends Component {\nconstructor(props) {\n  super(props)\n}\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"container\" id=\"drum-machine\">\n          <PadLine startNum={0} />\n          <PadLine startNum={3} />\n          <PadLine startNum={6} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}